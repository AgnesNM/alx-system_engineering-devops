#!/usr/bin/env bash
# Set up monitors for disk read and write requests per second

# Replace with your actual API and Application keys
API_KEY="your-api-key-here"
APP_KEY="your-application-key-here"

echo "Setting up Datadog monitors for disk I/O..."

# Monitor for disk read requests per second
echo "Creating monitor for disk read requests..."
READ_RESPONSE=$(curl -s -X POST "https://api.datadoghq.com/api/v1/monitor" \
     -H "Content-Type: application/json" \
     -H "DD-API-KEY: $API_KEY" \
     -H "DD-APPLICATION-KEY: $APP_KEY" \
     -d '{
       "type": "metric alert",
       "query": "avg(last_5m):avg:system.io.r_s{*} > 100",
       "name": "High Disk Read Requests",
       "message": "Disk read requests per second is high: {{value}} reads/sec on {{host.name}}.\n\nThis may indicate:\n- Heavy database queries\n- Large file operations\n- Memory pressure causing swap usage\n\nConsider investigating disk I/O patterns and potentially scaling storage resources.",
       "tags": ["service:system", "team:infrastructure", "alert:disk-io"],
       "options": {
         "thresholds": {
           "critical": 100,
           "warning": 80
         },
         "notify_no_data": false,
         "renotify_interval": 60,
         "timeout_h": 0,
         "include_tags": true,
         "require_full_window": false,
         "new_host_delay": 300,
         "evaluation_delay": 60
       }
     }')

# Check if read monitor was created successfully
if echo "$READ_RESPONSE" | grep -q '"id"'; then
    READ_MONITOR_ID=$(echo "$READ_RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
    echo "✓ Disk read monitor created successfully (ID: $READ_MONITOR_ID)"
else
    echo "✗ Failed to create disk read monitor"
    echo "Response: $READ_RESPONSE"
fi

echo ""
echo "Creating monitor for disk write requests..."

# Monitor for disk write requests per second  
WRITE_RESPONSE=$(curl -s -X POST "https://api.datadoghq.com/api/v1/monitor" \
     -H "Content-Type: application/json" \
     -H "DD-API-KEY: $API_KEY" \
     -H "DD-APPLICATION-KEY: $APP_KEY" \
     -d '{
       "type": "metric alert",
       "query": "avg(last_5m):avg:system.io.w_s{*} > 50",
       "name": "High Disk Write Requests",
       "message": "Disk write requests per second is high: {{value}} writes/sec on {{host.name}}.\n\nThis may indicate:\n- Heavy logging activity\n- Database write operations\n- File uploads/downloads\n- Backup operations\n\nConsider investigating write patterns and potentially optimizing I/O or scaling storage.",
       "tags": ["service:system", "team:infrastructure", "alert:disk-io"],
       "options": {
         "thresholds": {
           "critical": 50,
           "warning": 40
         },
         "notify_no_data": false,
         "renotify_interval": 60,
         "timeout_h": 0,
         "include_tags": true,
         "require_full_window": false,
         "new_host_delay": 300,
         "evaluation_delay": 60
       }
     }')

# Check if write monitor was created successfully
if echo "$WRITE_RESPONSE" | grep -q '"id"'; then
    WRITE_MONITOR_ID=$(echo "$WRITE_RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
    echo "✓ Disk write monitor created successfully (ID: $WRITE_MONITOR_ID)"
else
    echo "✗ Failed to create disk write monitor"
    echo "Response: $WRITE_RESPONSE"
fi

echo ""
echo "=== Summary ==="
echo "✓ Disk I/O monitors setup complete!"
echo ""
echo "Monitors created:"
echo "1. High Disk Read Requests (system.io.r_s)"
echo "   - Warning: 80 reads/sec"
echo "   - Critical: 100 reads/sec"
echo ""
echo "2. High Disk Write Requests (system.io.w_s)"
echo "   - Warning: 40 writes/sec" 
echo "   - Critical: 50 writes/sec"
echo ""
echo "View your monitors at: https://app.datadoghq.com/monitors"
echo "Check metrics at: https://app.datadoghq.com/metric/explorer"
echo ""
echo "To test the monitors, you can generate disk activity:"
echo "  sudo dd if=/dev/zero of=/tmp/test_write bs=1M count=100"
echo "  sudo dd if=/tmp/test_write of=/dev/null bs=1M"
echo "  rm /tmp/test_write"
